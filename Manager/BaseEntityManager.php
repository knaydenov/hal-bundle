<?phpnamespace Kna\HalBundle\Manager;use Doctrine\ORM\EntityManager;use Doctrine\ORM\QueryBuilder;use Kna\HalBundle\Filter\FilterInterface;use Pagerfanta\Adapter\DoctrineORMAdapter;use Pagerfanta\Pagerfanta;abstract class BaseEntityManager extends BaseManager implements PageableManagerInterface{    /**     * @return EntityManager     */    public function getEntityManager()    {        return $this->getObjectManager();    }    /**     * {@inheritdoc}     */    public function getPager(FilterInterface $filter): Pagerfanta    {        $queryBuilder = $this->resolveQueryBuilder($filter);        $adapter = new DoctrineORMAdapter($queryBuilder);        $pager = new Pagerfanta($adapter);        $pager->setMaxPerPage($filter->get('limit'));        $pager->setCurrentPage($filter->get('page'));        return $pager;    }    /**     * @param $alias     * @return QueryBuilder     */    public function createQueryBuilder($alias): QueryBuilder    {        return $this->getRepository()->createQueryBuilder($alias);    }    /**     * @param FilterInterface $filter     * @return QueryBuilder     */    public function resolveQueryBuilder(FilterInterface $filter): QueryBuilder    {        $queryBuilder = $this->createQueryBuilder('e');        foreach ($filter as $parameter => $parameterValue) {            $method = 'process' . ucfirst($parameter) . 'Parameter';            if (method_exists($this, $method)) {                $this->$method($queryBuilder, $parameterValue, $filter);            }        }        return $queryBuilder;    }}
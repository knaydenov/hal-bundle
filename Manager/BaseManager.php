<?phpnamespace Kna\HalBundle\Manager;use Doctrine\Common\Persistence\ManagerRegistry;use Doctrine\Common\Persistence\ObjectManager;use Doctrine\Common\Persistence\ObjectRepository;abstract class BaseManager implements ManagerInterface{    /**     * @var string     */    protected $class;    /**     * @var ManagerRegistry     */    protected $managerRegistry;    /**     * BaseManager constructor.     * @param ManagerRegistry $managerRegistry     * @param $class     */    public function __construct($class, ManagerRegistry $managerRegistry)    {        $this->managerRegistry = $managerRegistry;        $this->class = $class;    }    /**     * @return string     */    public function getClass(): string {        return $this->class;    }    /**     * @return ObjectManager     */    public function getObjectManager(): ObjectManager    {        $manager = $this->managerRegistry->getManagerForClass($this->class);        if (!$manager) {            throw new \RuntimeException(sprintf('Unable to find the mapping information for the class %s.', $this->class));        }        return $manager;    }    /**     * @return ObjectRepository     */    public function getRepository(): ObjectRepository    {        return $this->getObjectManager()->getRepository($this->class);    }    /**     * @param $object     */    protected function checkObject($object): void    {        if (!$object instanceof $this->class) {            throw new \InvalidArgumentException(sprintf(                'Object must be instance of %s, %s given',                $this->class, is_object($object) ? get_class($object) : gettype($object)            ));        }    }    /**     * @return array     */    public function findAll(): array    {        return $this->getRepository()->findAll();    }    /**     * @param integer $id     * @return object|null     */    public function find($id)    {        return $this->getRepository()->find($id);    }    /**     * @param array $criteria     * @param array|null $orderBy     * @param null $limit     * @param null $offset     * @return array     */    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null): array    {        return $this->getRepository()->findBy($criteria, $orderBy, $limit, $offset);    }    /**     * @param array $criteria     * @return null|object     */    public function findOneBy(array $criteria)    {        return $this->getRepository()->findOneBy($criteria);    }    /**     * @param object $object     * @param bool|true $andFlush     */    public function save($object, $andFlush = true): void    {        $this->checkObject($object);        $this->getObjectManager()->persist($object);        if ($andFlush) {            $this->getObjectManager()->flush();        }    }    /**     * @param object $object     * @param bool|true $andFlush     */    public function delete($object, $andFlush = true): void    {        $this->checkObject($object);        $this->getObjectManager()->remove($object);        if ($andFlush) {            $this->getObjectManager()->flush();        }    }    /**     * @return mixed     */    public function create()    {        return new $this->class();    }}